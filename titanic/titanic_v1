import pandas as pd
import os
from sklearn import model_selection, preprocessing, ensemble
import seaborn as sns

dir='D:\Vijaya\Data Science\ML Programs\Kaggle - titanic'
titanic_train = pd.read_csv(os.path.join(dir, 'train.csv'))
print(titanic_train.info())
print(titanic_train.columns) 

#Preprocessing for missing data values
sns.FacetGrid(titanic_train, hue='Survived',size=8).map(sns.kdeplot,'Age').add_legend()
age_imputer = preprocessing.Imputer()
age_imputer.fit(titanic_train[['Age']])
titanic_train['Age_imputer'] = age_imputer.transform(titanic_train[['Age']])

#Preprocessing for missing data values as test data is having missing values 
sns.FacetGrid(titanic_train, hue='Survived',size=8).map(sns.kdeplot,'Fare').add_legend()
fare_imputer = preprocessing.Imputer()
fare_imputer.fit(titanic_train[['Fare']])

sns.countplot(x='Embarked', data=titanic_train)
titanic_train.loc[titanic_train['Embarked'].isnull(),'Embarked'] = "S"

sns.countplot(x='SibSp',data=titanic_train)
sns.distplot(titanic_train['SibSp'], hist = False)
sns.boxplot(x='SibSp',data=titanic_train)
sns.FacetGrid(titanic_train, hue='Survived',size=8 ).map(sns.kdeplot,'SibSp').add_legend()

sns.FacetGrid(titanic_train, hue='Survived', size=8).map(sns.kdeplot,'Parch').add_legend()

#Preprocessing of data
sex_encoder = preprocessing.LabelEncoder()
sex_encoder.fit(titanic_train['Sex'])
titanic_train['Sex_encoded'] = sex_encoder.transform(titanic_train['Sex'])

#Preprocessing of data
pclass_encoder = preprocessing.LabelEncoder()
pclass_encoder.fit(titanic_train['Pclass'])
titanic_train['Pclass_encoded']=pclass_encoder.transform(titanic_train['Pclass'])

#Preprocessing of data
emb_encoder = preprocessing.LabelEncoder()
emb_encoder.fit(titanic_train['Embarked'])
titanic_train['Embarked_encoded'] = emb_encoder.transform(titanic_train['Embarked'])

#Feature Engineering Techniques of feature creation
def extract_title(name):
     return name.split(',')[1].split('.')[0].strip()
titanic_train['Title'] = titanic_train['Name'].map(extract_title)

sns.factorplot(x='Title',hue ='Survived', data=titanic_train, kind='count', size=8)

#Preprocessing of data
title_encoder = preprocessing.LabelEncoder()
title_encoder.fit(titanic_train['Title'])
titanic_train['Title_encoded'] = title_encoder.transform(titanic_train['Title'])

titanic_train['FamilySize'] = titanic_train['SibSp']+ titanic_train['Parch'] +1
sns.FacetGrid(titanic_train, hue = 'Survived', size =8).map(sns.kdeplot,'FamilySize').add_legend()

#Creating new feature
def convert_family_group(size):
    if(size==1):
        return 'Single'
    elif(size<=5):
        return 'Medium'
    else:
        return 'Large'
    
titanic_train['FamilyGroup']= titanic_train['FamilySize'].map(convert_family_group)
sns.factorplot(x = 'FamilyGroup', hue='Survived', data=titanic_train, kind='count', size=8)

#Preprocessing of data
fg_encoder = preprocessing.LabelEncoder()
fg_encoder.fit(titanic_train['FamilyGroup'])
titanic_train['FamilyGroup_encoded'] = fg_encoder.transform(titanic_train['FamilyGroup'])

features = ['SibSp','Parch','Fare','Age_imputer', 'Sex_encoded', 'Pclass_encoded',
            'Embarked_encoded','Title_encoded','FamilySize','FamilyGroup_encoded']
X = titanic_train[features]
y=titanic_train[['Survived']]

#Splitting data into train and test data
X_train,X_eval, y_train, y_eval = model_selection.train_test_split(X,y, test_size=0.1,random_state=1)

#Model building
rf_estimator = ensemble.RandomForestClassifier(random_state=100)
rf_grid = {'max_depth':[3,4,5,6],
           'n_estimators':list(range(10,50,10)),
           'max_features':[2,3,4]}
rf_grid_estimator = model_selection.GridSearchCV(rf_estimator, rf_grid, scoring='accuracy', cv=10)
rf_grid_estimator.fit(X_train,y_train)
print(rf_grid_estimator.best_estimator_)
print(rf_grid_estimator.best_score_)
print(rf_grid_estimator.best_params_)
print(rf_grid_estimator.score(X_train,y_train))

print(rf_grid_estimator.score(X_eval,y_eval))

titanic_test = pd.read_csv(os.path.join(dir, 'test.csv'))
print(titanic_test.info())
print(titanic_test.columns)

#Applying the preprocessing and feature engineering techniques to test data
titanic_test['Fare'] = fare_imputer.transform(titanic_test[['Fare']])
titanic_test['Age_imputer'] = age_imputer.transform(titanic_test[['Age']])
titanic_test['Sex_encoded'] = sex_encoder.transform(titanic_test['Sex'])
titanic_test['Pclass_encoded'] = pclass_encoder.transform(titanic_test['Pclass'])
titanic_test['Embarked_encoded'] = emb_encoder.transform(titanic_test['Embarked'])

titanic_test['Title'] = titanic_test['Name'].map(extract_title)
titanic_test.loc[titanic_test['Title']=='Dona','Title'] = 'Mrs'
titanic_test['Title_encoded'] = title_encoder.transform(titanic_test['Title'])

titanic_test['FamilySize'] = titanic_test['SibSp'] + titanic_test['Parch'] +1
titanic_test['FamilyGroup'] = titanic_test['FamilySize'].map(convert_family_group)
titanic_test['FamilyGroup_encoded'] = fg_encoder.transform(titanic_test['FamilyGroup'])

X_test = titanic_test[features]

#Prediction of target
titanic_test['Survived'] = rf_grid_estimator.best_estimator_.predict(X_test)
#Creating CSV File
titanic_test.to_csv(os.path.join(dir,'SubmissionV7.csv'), columns=['PassengerId','Survived'], index=False)
